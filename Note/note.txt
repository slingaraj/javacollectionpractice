Date Started 11.12.2024
Collection Framework in Java:
Iterable-> List-> ArrayList,LinkedList,Vector,Stack,CopyonWriteArrayList

Topic:1 ArrayList:
Unlike a regular array,which has a fixed size and ArrayList can grow and shrink as elements are added or removed.
This dynamic resizing is archived by creating a new array when the current array is full and copying the elements to the new array.

Capacity of an Arraylist when initialize default is 10.(Before dynamic resizing).

How to Create:
ArrayList<Type> name = new ArrayList<>();
or List<Type> name = new ArrayList<>();
EXample :
 ArrayList<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(0,0);
        System.out.println(list);

        List<Integer> list1= List.of(4,5,4,5);
        System.out.println(list1);
        list.addAll(list1);
        System.out.println(list);
Accessing the elements
string fruit=list.get(0);

Modify the elements
list.set(1,"Graphes");

Remove the element
by index
list.remove(0);
by name
list.remove("Apple")//Remove the first occurrence.
list.remove(Integer.valueOf(1));//by value

checking the elements
boolean hasApple=list.contains("Apple");//it return true if the list contains the Apple.

converting to Array
String[] array = list.toArray(new String[0]);

Sort a List
     ArrayList<Integer> list = new ArrayList<>();
        list.add(5);
        list.add(7);
        list.add(4);
        list.add(6);
        list.add(1);
        list.add(8);

        Collections.sort(list);or do  list.sort(null);
        System.out.println(list);

Topic:2 LinkedList:
-----------------
List ka ek aur implementation class.
Array is contiguous block of  memory location.
but Linked list is a pointer based address mapping.

LinkedList is a liner data structure where each element is a separate object
called node.
Each node contains two parts
Data and pointer
Data: The value stored in the node.
Pointer: Two pointers, one pointing to the next node (next)
and other pointing to the previous node(previous).

Performance Consideration:
-------------------------
LinkedList has different performance characteristics compared to ArrayList.

Insertion and Deletion:
LinkedList is betel for frequent insertion and deletion.
Here we do not need shifting elements as arrayList.

Random Access:
LinkedList has slower random access (get(int index)) compared
to ArrayList because it has to traverse the list from the beginning to reach the
desire index.

Example:
LinkedList<Integer> linkedlist = new LinkedList<>();
        linkedlist.add(1);
        linkedlist.add(2);
        linkedlist.add(3);
        linkedlist.add(4);
        linkedlist.add(5);
        linkedlist.addFirst(6);
        linkedlist.addLast(7);

        System.out.println(linkedlist);

        linkedlist.get(4); //O(n)
        linkedlist.getFirst();
        linkedlist.getLast();
        System.out.println(linkedlist.get(1));

        linkedlist.remove(1);
        linkedlist.removeIf(x-> x%2==0); //in java8
        //Remove all even number
        System.out.println(linkedlist);

        LinkedList<String> animals= new LinkedList<String>(Arrays.asList("Cat","Dog","Elephant","Cow"));
        LinkedList<String> animalsToRemove = new LinkedList<>(Arrays.asList("Cow"));
        animals.removeAll(animalsToRemove);
        System.out.println(animals);

Topic:3 Vector
-----------------
List ka ek aur implementation class he vector.

A vector in java is a part of the java.util package and is one of the legacy classes in java
that implements the List interface.

it was introduced in JDK1.0 before collection framework and is synchronized , making it thread-safe.

However, due to its synchronization overhead. it's generally recommended to use other modern
alternatives like ArrayList in single-thread scenario.
Despite this,Vector is still usefully in certain situations,partially in multithreaded environments where
thread safety is a concern.

Key Features:
Dynamic Array: Like ArrayList , Vector is a dynamic array that grows automatically when more
elements are added then its current size.

Synchronized, Legacy class(It's recommended to use ArrayList in single-threaded environments due to performance considerations.)
Resizing Mechanism(when the current size of the vector is excluded,It doubles its size by default(or increase by specific capacity increment if provided.))
Random  Access,

Example
 Vector<Integer> vector= new Vector<>(11,3);
        System.out.println(vector.capacity());//default is 10 else o/p 11

in the new Vector(11,3)
here 11 is the capacity of the vector
and 3 is the increment size of the vector.
If you not provide the incrementalism it will increase 2x times.

Methods in the vector
->add(E e): Adds an element at the end.
->add(int index, E element): Inserts an element at the specified index.
->get(int index): Retries the element as the specified index.
->set(int index, E element): Replace the element at the specified element.
... etc.

Synchronization and performance.
-------------------------------
Since vector methods are synchronized,it ensures that only one thread can access
the vector at a time.This make it thread-safe but can introduce performance overhead
in single thread env because sync. adds locking and unlocking cots.

Topic:4 Stack
LIFO
Last item added to the stack will be the first item to be removed.
it's a stack of cookies(biscuit).
Since stack extends vector its synchronized.making it thread safe.


Topic:4 CopyOnWriteArrayList
---------------------------
Reading and modifying on same time.

Topic: 5 MAP
-------------
In java, a map is an object that maps keys to values.
It cannot contain duplicate keys, and each key can map to ay most one value.
Think of it as a dictionary where you look up a word
(key)
.
to find its definition (value).
Map ka implementation class ek he HashMap

Topic:6 HashMap
HashMap<Integer,String> map= new HashMap<>();
        map.put(1,"Hasrshit");
        map.put(2,"Lingaraj");
        map.put(3,"Neha");
        System.out.println(map);

        String student = map.get(3);
        System.out.println(student);
        String student1 = map.get(35);
        System.out.println(student1);//null
        System.out.println(map.containsValue("Lingaraj"));//true
        System.out.println(map.containsKey(2));//true

        Set<Integer> keys=map.keySet();
        System.out.println(keys);
        for (int i: keys){
            System.out.println(map.get(i));//outcomes unordered.
        }
         Set<Map.Entry<Integer,String>> entries= map.entrySet();
        for (Map.Entry<Integer, String> entry:entries){
            System.out.println(entry.getKey()+":"+entry.getValue());
            entry.setValue(entry.getValue().toUpperCase());
        }
        System.out.println(map);
2:21:25 time stamp--

























